import { readdirSync, existsSync, mkdirSync, statSync } from 'fs'
import { join, extname, basename, dirname, relative } from 'path'
import sharp from 'sharp'

const SUPPORTED_FORMATS = ['.jpg', '.jpeg', '.png', '.webp', '.tiff', '.gif', '.bmp']
const srcDir = 'src/images'
const outputDir = 'public/images'

async function ensureDir(dirPath) {
  if (!existsSync(dirPath)) {
    mkdirSync(dirPath, { recursive: true })
  }
}

async function convertImage(inputPath, outputDir, filename) {
  const baseName = basename(filename, extname(filename))
  const relativePath = relative(srcDir, dirname(inputPath))
  const targetDir = join(outputDir, relativePath)

  await ensureDir(targetDir)

  const outputPaths = {
    avif: join(targetDir, `${baseName}.avif`),
    webp: join(targetDir, `${baseName}.webp`),
    original: join(targetDir, filename)
  }

  try {
    const image = sharp(inputPath)

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ AVIF (–ª—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ)
    await image
      .clone()
      .avif({
        quality: 80,
        effort: 4,
        chromaSubsampling: '4:2:0'
      })
      .toFile(outputPaths.avif)

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WebP (—à–∏—Ä–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
    await image
      .clone()
      .webp({
        quality: 85,
        effort: 4,
        method: 6
      })
      .toFile(outputPaths.webp)

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const ext = extname(filename).toLowerCase()
    if (ext === '.jpg' || ext === '.jpeg') {
      await image
        .clone()
        .jpeg({
          quality: 90,
          progressive: true,
          mozjpeg: true
        })
        .toFile(outputPaths.original)
    } else if (ext === '.png') {
      await image
        .clone()
        .png({
          quality: 90,
          compressionLevel: 9,
          progressive: true
        })
        .toFile(outputPaths.original)
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      await image
        .clone()
        .toFile(outputPaths.original)
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${filename}`)
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${filename}:`, error.message)
    return false
  }
}

async function processDirectory(dirPath) {
  if (!existsSync(dirPath)) {
    console.log(`üìÅ –ü–∞–ø–∫–∞ ${dirPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.`)
    return
  }

  const items = readdirSync(dirPath)
  let totalFiles = 0
  let processedFiles = 0

  for (const item of items) {
    const itemPath = join(dirPath, item)
    const stat = statSync(itemPath)

    if (stat.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      await processDirectory(itemPath)
    } else if (stat.isFile()) {
      const ext = extname(item).toLowerCase()
      if (SUPPORTED_FORMATS.includes(ext)) {
        totalFiles++
        const success = await convertImage(itemPath, outputDir, item)
        if (success) processedFiles++
      }
    }
  }

  if (totalFiles > 0) {
    console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedFiles}/${totalFiles} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ${dirPath}`)
  }
}

async function main() {
  console.log('üñºÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n')

  await ensureDir(outputDir)
  await processDirectory(srcDir)

  console.log('\n‚ú® –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${outputDir}`)
  console.log('\nüí° –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ:')
  console.log('   üì∏ .avif - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ª—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ)')
  console.log('   üåê .webp - —à–∏—Ä–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
  console.log('   üîÑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)')
}

main().catch(console.error)
